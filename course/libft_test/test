AHello WorldHello World$				      |	-> isalpha$
42-4202147483647-2147483648-> ft_isalpha$		      |	a: 1024$
a: 1$							      |	A: 1024$
A: 1$							      <
1: 0$								1: 0$
#: 0$								#: 0$
 : 0$								 : 0$
$								$
-> ft_isdigit$						      |	-> isdigit$
0: 1$							      |	0: 2048$
9: 1$							      |	9: 2048$
a: 0$								a: 0$
 : 0$								 : 0$
$								$
-> ft_isalnum$						      |	-> isalnum$
a: 1$							      |	a: 8$
Z: 1$							      |	Z: 8$
0: 1$							      |	0: 8$
9: 1$							      |	9: 8$
#: 0$								#: 0$
 : 0$								 : 0$
$								$
-> ft_isascii$						      |	-> isascii$
a: 1$								a: 1$
0: 1$								0: 1$
DEL (127): 1$							DEL (127): 1$
128: 0$								128: 0$
-1: 0$								-1: 0$
$								$
-> isprint$							-> isprint$
a: 1$							      |	a: 16384$
space: 1$						      |	space: 16384$
\t: 0$								\t: 0$
DEL (127): 0$							DEL (127): 0$
$								$
-> ft_strlen$						      |	-> strlen$
Empty string: 0$						Empty string: 0$
Hello: 5$							Hello: 5$
Hello world!: 12$						Hello world!: 12$
$								$
-> ft_memset$						      |	-> memset$
Before: Hello World$						Before: Hello World$
After: ***** World$						After: ***** World$
$								$
-> ft_bzero$						      |	-> bzero$
Before: Hello World$						Before: Hello World$
After (as hex): 00 00 00 00 00 20 57 6f 72 6c 64 $		After (as hex): 00 00 00 00 00 20 57 6f 72 6c 64 $
$								$
-> ft_memcpy$						      |	-> memcpy$
Before: src = Hello World, dest = ...............$		Before: src = Hello World, dest = ...............$
After: dest = Hello World....$					After: dest = Hello World....$
$								$
-> ft_memmove$						      |	-> memmove$
Before: Hello World$						Before: Hello World$
After overlapping move: Hello Hello$				After overlapping move: Hello Hello$
$								$
-> ft_strlcpy$						      |	-> strlcpy$
Full copy: dest = "Hello World", len = 11$			Full copy: dest = "Hello World", len = 11$
Partial copy: dest = "Hello", len = 11$				Partial copy: dest = "Hello", len = 11$
Zero-size copy: dest unchanged, len = 11$			Zero-size copy: dest unchanged, len = 11$
$								$
-> ft_strlcat$						      |	-> strlcat$
Normal concat: dest = "Hello World", len = 11$			Normal concat: dest = "Hello World", len = 11$
Size-limited concat: dest = "Hello W", len = 11$		Size-limited concat: dest = "Hello W", len = 11$
$								$
-> ft_toupper$						      |	-> toupper$
a -> A$								a -> A$
z -> Z$								z -> Z$
A -> A$								A -> A$
Z -> Z$								Z -> Z$
0 -> 0$								0 -> 0$
space -> ' '$							space -> ' '$
$								$
-> ft_tolower$						      |	-> tolower$
A -> a$								A -> a$
Z -> z$								Z -> z$
a -> a$								a -> a$
z -> z$								z -> z$
0 -> 0$								0 -> 0$
space -> ' '$							space -> ' '$
$								$
-> ft_strchr$						      |	-> strchr$
Search 'W' in "Hello World": World$				Search 'W' in "Hello World": World$
Search 'o' in "Hello World": o World$				Search 'o' in "Hello World": o World$
Search 'z' in "Hello World": (null)$				Search 'z' in "Hello World": (null)$
Search '\0' in "Hello World": $					Search '\0' in "Hello World": $
$								$
-> ft_strrchr$						      |	-> strrchr$
Search last 'l' in "Hello World": ld$				Search last 'l' in "Hello World": ld$
Search last 'o' in "Hello World": orld$				Search last 'o' in "Hello World": orld$
Search last 'z' in "Hello World": (null)$			Search last 'z' in "Hello World": (null)$
Search last '\0' in "Hello World": $				Search last '\0' in "Hello World": $
$								$
-> ft_strncmp$						      |	-> strncmp$
test 1: 0$							test 1: 0$
test 2: -1$							test 2: -1$
test 3: 0$							test 3: 0$
test 4: -100$							test 4: -100$
test 5: 100$							test 5: 100$
test 6: 0$							test 6: 0$
$								$
-> ft_memchr$						      |	-> memchr$
Search 'W': World$						Search 'W': World$
Search 'o': o World$						Search 'o': o World$
Search 'z': (nil)$						Search 'z': (nil)$
Search '\0': $							Search '\0': $
$								$
-> ft_memcmp$						      |	-> memcmp$
test 1: 0$							test 1: 0$
test 2: -1$							test 2: -1$
test 3: -1$							test 3: -1$
test 4: 0$							test 4: 0$
test 5: 0$							test 5: 0$
$								$
-> ft_strnstr$						      |	-> strnstr$
Find "World" in "Hello World": World$				Find "World" in "Hello World": World$
Find "Hello" in "Hello World": Hello World$			Find "Hello" in "Hello World": Hello World$
Find "lo" in "Hello World": lo World$				Find "lo" in "Hello World": lo World$
Find "xyz" in "Hello World": (null)$				Find "xyz" in "Hello World": (null)$
Find "" in "Hello World": Hello World$				Find "" in "Hello World": Hello World$
$								$
-> ft_atoi$						      |	-> atoi$
"42": 42$							"42": 42$
"-42": -42$							"-42": -42$
"   +42": 42$							"   +42": 42$
"\t\n\v\f\r 42": 42$						"\t\n\v\f\r 42": 42$
"   -42abc": -42$						"   -42abc": -42$
"2147483647": 2147483647$					"2147483647": 2147483647$
"-2147483648": -2147483648$					"-2147483648": -2147483648$
$								$
-> ft_strmapi$						      |	-> strmapi$
Mapping "abc" with i+c: "ace"$					Mapping "abc" with i+c: "ace"$
$								$
-> ft_striteri$						      |	$
							      >	-> striteri$
Before: "hello world"$						Before: "hello world"$
After (uppercase even indices): "HeLlO WoRlD"$			After (uppercase even indices): "HeLlO WoRlD"$
$								$
-> ft_putchar_fd$					      <
Writing 'A' to stdout: $				      <
$							      <
-> ft_putstr_fd$					      <
Writing "Hello World" to stdout: $			      <
$							      <
-> ft_putendl_fd$					      <
Writing "Hello World" with newline to stdout: $		      <
-> ft_putnbr_fd$					      <
Writing 42 to stdout: $					      <
Writing -42 to stdout: $				      <
Writing 0 to stdout: $					      <
Writing 2147483647 to stdout: $				      <
Writing -2147483648 to stdout: $			      <
$								$
