Functional Requirements
Shell Behavior
Display a prompt when waiting for user input.

Use GNU Readline library for input with working command history.

Correctly parse and execute commands using the system environment and PATH.

Support relative and absolute paths to executables.

Implement a single global variable only to store received signals (signal numbers). No complex global state allowed.

Properly handle signals:

Ctrl-C should cancel the current input and display a new prompt.

Ctrl-D should exit the shell.

Ctrl-\ should be ignored.

Command Parsing
Handle quoting rules:

Single quotes '...' prevent interpretation of metacharacters.

Double quotes "..." prevent interpretation except for $ (for variable expansion).

Implement environment variable expansion:

$VARIABLE expands to its value.

$? expands to the exit status of the last command.

Do not interpret unsupported special characters (e.g., backslash \ or semicolon ;).

Redirections and Pipes
Implement input/output redirection:

< for input redirection.

> for output redirection (overwrite).

>> for output redirection (append).

<< (here-document) reads until a delimiter line is reached; input from here-doc should not be added to history.

Support piping (|):

Connect the output of one command to the input of the next.

Support multiple chained pipes.

Built-in Commands
Implement these built-ins with the specified behaviors:

echo [-n] - print arguments; -n suppresses the trailing newline.

cd - change directory using relative or absolute paths.

pwd - print current working directory; no options.

export - add or modify environment variables; no options.

unset - remove environment variables; no options.

env - display environment variables; no arguments.

exit - exit the shell; no options.

Allowed External Functions
You can use the following external functions (important for parsing, execution, signal handling, etc.):

Input and output: readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history, printf, write.

Memory management: malloc, free.

File operations: access, open, read, close, unlink, stat, lstat, fstat.

Process control: fork, wait, waitpid, wait3, wait4, execve, kill, exit.

Signals: signal, sigaction, sigemptyset, sigaddset.

Directory: opendir, readdir, closedir.

Terminal and environment: isatty, ttyname, ttyslot, ioctl, getcwd, chdir, getenv, tcsetattr, tcgetattr.

Terminal capabilities: tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs.

Error reporting: strerror, perror.

Duplication and pipes: dup, dup2, pipe.

minishell/
├── src/               # Source files (.c)
│   ├── main.c         # Entry point
│   ├── parser.c       # Parsing logic (quotes, tokens, expansions)
│   ├── executor.c     # Command execution, forks, pipes, redirections
│   ├── builtin.c      # Built-in command implementations
│   ├── signals.c      # Signal handlers
│   ├── utils.c        # Helper functions (string utils, error handling)
│   └── ...            # Other source files as needed
│
├── include/           # Header files (.h)
│   ├── minishell.h    # Main project-wide definitions and prototypes
│   ├── parser.h       # Parser function prototypes and structs
│   ├── executor.h     # Execution related prototypes
│   ├── builtin.h      # Built-in commands interface
│   ├── signals.h      # Signal handling prototypes
│   └── utils.h        # Utility function prototypes
│
├── libft/             # Your custom libft library source and headers (if allowed)
│   ├── src/
│   └── include/
│
├── obj/               # Object files (generated by Makefile)
│
├── Makefile           # Build instructions
├── README.md          # Project documentation and build guide
└── .gitignore         # To exclude obj/, executables, etc. from git
