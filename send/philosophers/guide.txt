#Creates a new thread within the calling process.
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, 
                  void *(*start_routine)(void *), void *arg);
thread: Pointer where the thread ID will be stored
attr: Thread attributes (NULL for defaults)
start_routine: Function the thread will execute
arg: Arguments to pass to the function
Returns 0 on success or an error code

#Marks a thread as detached. When a detached thread terminates, its resources are automatically released.

int pthread_detach(pthread_t thread);

tread: ID of the thread to detach
Returns 0 on success or an error code

#Waits for the specified thread to terminate. This is the thread equivalent of wait() for processes.

int pthread_join(pthread_t thread, void **retval);
thread: ID of the thread to wait for
retval: Pointer to store the thread's return value
Returns 0 on success or an error code

#Initializes a mutex with specified attributes.

int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
mutex: Pointer to the mutex to initialize
attr: Mutex attributes (NULL for defaults)
Returns 0 on success or an error code

#Destroys a mutex, freeing its resources.

int pthread_mutex_destroy(pthread_mutex_t *mutex);
mutex: Pointer to the mutex to destroy
Returns 0 on success or an error code

#Locks a mutex. If the mutex is already locked, the calling thread blocks until the mutex becomes available.

int pthread_mutex_lock(pthread_mutex_t *mutex);
mutex: Pointer to the mutex to lock
Returns 0 on success or an error code

#Unlocks a mutex, making it available for other threads.

int pthread_mutex_unlock(pthread_mutex_t *mutex);
mutex: Pointer to the mutex to unlock
Returns 0 on success or an error code
